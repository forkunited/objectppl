// Run with:
// webppl test/wppl/game/train_model_incS1.wppl --require ../lib/webppl-nn --require ../gameppl --require . --random-seed 1 --rootDir . --inputF incS1_in --outputF incS1_out --iterations 100 --latentDim 25 --splitName world_80_10_10 --splitType GAME_ROUND

var args = util_parseArgs();
var rootDir = args["rootDir"];
var inputFName = args["inputF"];
var outputFName = args["outputF"];
var iterations = args["iterations"]*1;
var latentDim = args["latentDim"]*1;
var splitName = args["splitName"];
var splitType = args["splitType"];
var rsaAlpha = 1.0;
var maxUtteranceLength = 4;
var approximationBeamSize = 5;
var languagePruneSize = 100;
var batchSize = 1;
var gradientSamples = 1;

var inputf = gameppl.feature.loadFeatureSet(rootDir + "/examples/features/vocab/" + inputFName);
var outputf = gameppl.feature.loadFeatureSet(rootDir + "/examples/features/vocab/" + outputFName);

var inputF = gameppl.feature.loadFeatureMatrix(rootDir + "/examples/features/mat/" + inputFName);
var outputF = gameppl.feature.loadFeatureMatrix(rootDir + "/examples/features/mat/" + outputFName);

var D = data_makeFromFeatureMatrices(inputF, outputF, { inputType : DATA_TYPE_VECTOR, outputType : DATA_TYPE_SCALAR_SEQUENCE, maxSequenceLength : maxUtteranceLength });
var partition = gameppl.partition.load(rootDir + "/examples/games/splits/1/" + splitName);
var splitFn = (splitType === "GAME") ? gameppl.data.getDatumGame : (splitType === "ROUND") ? gameppl.data.getDatumRound : gameppl.data.getDatumGameRound

var D_split = gameppl.partition.split(partition, D, splitFn);
var D_train = D_split['train'];
var D_dev = D_split['dev'];

var worldDimension = gameppl.feature.getFeatureMatrixVocabularySize(inputF);
var utteranceDimension = gameppl.feature.getFeatureMatrixVocabularySize(outputF);
var nameDimension = gameppl.feature.getFeatureSetFeatureSize(inputf, "sTargetName");
var catDimension = gameppl.feature.getFeatureSetFeatureSize(inputf, "sTargetCategory1");
var l0inputDimension = utteranceDimension + nameDimension + catDimension;

var s1model = s1inc_initTrainedModel({
    maxUtteranceLength : maxUtteranceLength,
    worldDimension : worldDimension,
    utteranceDimension : utteranceDimension,
    l0inputDimension : l0inputDimension,
    latentDimension : latentDim,
    beamSize : approximationBeamSize,
    languagePruneSize : languagePruneSize,
    iterations : iterations,
    gradientSamples : gradientSamples,
    batchSize : batchSize,
    l0seqFn: function(utterance, hidden, observation) {
        var catName = concat([oneHot(hidden[0], catDimension), oneHot(hidden[1], nameDimension)]);
        var uttWorld = map(function(x) {
            concat([oneHot(x, utteranceDimension), catName])
        }, utterance);
        return uttWorld;
    },
    rsaAlpha: rsaAlpha,
    rsaWorldPriorSize : 3,
    rsaWorldPrior: function(observed) {
        return uniformDraw(observed);
    },
    rsaHiddenWorldFn: function(world) {
        var targetCategory = gameppl.feature.getTensorFeatureRange(world, inputf, "sTargetCategory1");
        var targetName = gameppl.feature.getTensorFeatureRange(world, inputf, "sTargetName");
        return [ad.value(T.get(targetCategory,0)), ad.value(T.get(targetName,0))];
    },
    rsaObservedWorldFn: function(world) {
        var observedCategory0 = gameppl.feature.getTensorFeatureRange(world, inputf, "sCategory1_0");
        var observedName0 = gameppl.feature.getTensorFeatureRange(world, inputf, "sName_0");
        var observedCategory1 = gameppl.feature.getTensorFeatureRange(world, inputf, "sCategory1_1");
        var observedName1 = gameppl.feature.getTensorFeatureRange(world, inputf, "sName_1");
        var observedCategory2 = gameppl.feature.getTensorFeatureRange(world, inputf, "sCategory1_2");
        var observedName2 = gameppl.feature.getTensorFeatureRange(world, inputf, "sName_2");

        var catName0 = [ad.value(T.get(observedCategory0,0)), ad.value(T.get(observedName0,0))];
        var catName1 = [ad.value(T.get(observedCategory1,0)), ad.value(T.get(observedName1,0))];
        var catName2 = [ad.value(T.get(observedCategory2,0)), ad.value(T.get(observedName2,0))];

        return [catName0, catName1, catName2];
    },
}, D_train);

/*
map(function(datum) {
    var inputIndices = gameppl.matrix.rowTensorNonZeroIndices(datum.input);
    var inputFeatures = gameppl.feature.getFeatureSetDimensionsFromIndices(inputf, inputIndices);
    var trueOutputSequence = gameppl.feature.getFeatureSetDimensionsFromIndices(outputf, datum.output);

    display("Input: " + inputFeatures);
    //display("(Input values: " + inputFeatureValues + ")");
    display("True output: " + trueOutputSequence);

    display("Output distribution: ")
    var s0Dist = enc_modelDistribution(s0model, datum.input, util_objSoftmaxCategorical);
    var s0ReadableDist = map(function(kvPair) {
        var indices = map(function(idx) { idx*1 } , kvPair[0].split(","))
        display(gameppl.feature.getFeatureSetDimensionsFromIndices(outputf, indices) + ": " + kvPair[1]);
    }, gameppl.dist.distToArray(s0Dist, 3));

    display("\n");
}, gameppl.util._first(D_dev, 10));*/

var trainEval = evaluation_modelEncLL(s1model, D_train, util_objSoftmaxCategorical);
var devEval = evaluation_modelEncLL(s1model, D_dev, util_objSoftmaxCategorical);

display("F\titerations\ttrainLL\tdevLL\ttrainNeg\tdevNeg\ttrainUndef\tdevUndef");
display(inputFName + "\t" + iterations + "\t" + trainEval.ll + "\t" + devEval.ll + "\t" + trainEval.neg + "\t" + devEval.neg + "\t" + trainEval.undef + "\t" + devEval.undef);
